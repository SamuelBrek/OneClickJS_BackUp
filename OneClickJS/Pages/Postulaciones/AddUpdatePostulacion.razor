@page "/postulaciones/add/{id2:int}"
@page "/postulaciones/update/{id:int}"

@using OneClickJS.Data.Models
@using OneClickJS.Data
@using System.Net.Http
@inject IJSRuntime JS
@using System.Net.Http.Json
@using System.IO
@using static OneClickJS.Helpers.IJSExtensions
@inject HttpClient http
@using Microsoft.AspNetCore.Hosting;
@using OneClickJS.Helpers
@inject IWebHostEnvironment env
@inject NavigationManager NavigationManager

<div class="container">
    <h1>@(isUpdate ? $"Editar postulacion con Id: {postulacion.IdPostulacion}" : "Postularme")</h1>

    <EditForm Model="@postulacion">
        <form class="container-border" @onsubmit="Save">
            <DataAnnotationsValidator />
            @if (isUpdate == false)
            {


                <div class="row">
                    <div class="col">
                        <div class="input-group mb-3">
                            <span class="input-group-text spans" id="disabledTextInput1">Aspirante</span>

                            <input type="text" id="disabledTextInput1" class="form-control inputs" placeholder="@usuario.CorreoUsuario" disabled>


                        </div>
                    </div>
                    <div class="col">
                        <div class="input-group mb-3">
                            <span class="input-group-text spans" id="disabledTextInput">Empleo </span>

                            <input type="text" id="disabledTextInput" class="form-control inputs" placeholder="@empleo.NombreEmpleo" disabled>

                        </div>
                    </div>
                </div>

                <br />

                <div class="row">
                    <div class="col">
                        <div class="input-group mb-3">
                        </div>
                    </div>
                    <div class="col">
                        <center>
                        <div class="input-group mb-3">
                            
                                <h3>@Message</h3>
                            


                        </div>
                        </center>
                    </div>
                </div>





                <div class="row">
                    <div class="col">
                        <div class="input-group mb-3">
                            <span class="input-group-text spans" id="disabledTextInput2">Estado</span>

                            <input type="text" id="disabledTextInput2" class="form-control inputs" placeholder="Pendiente" disabled>

                        </div>
                    </div>

                    <div class="col">
                        <div class="input-group mb-3">


                            <InputFile class="form-control" required="" OnChange="OnInputFileChange" multiple @bind-Value="@postulacion.ArchivoPostulacion" id="archivoPost"></InputFile>
                            <label class="input-group-text spanFoto" for="archivoPost">Subir CV</label>
                        </div>
                    </div>
                </div>






            }
            @if (isUpdate)
            {
                <div class="input-group mb-3">
                    <span class="input-group-text spans" id="estadoPostulacion">Estado actual de postulación</span>
                   
                    <InputSelect class="form-control inputs" @bind-Value="@postulacion.EstadoPostulacion" id="estadoPostulacion">
                        <option value="Pendiente">Pendiente</option>
                        <option value="Aceptado">Aceptado</option>
                        <option value="Rechazado">Rechazado</option>
                    </InputSelect>
                </div>
            }

            <button type="submit" class="btn btn-success">Guardar</button>
            <a class="btn btn-danger" @onclick="() => CancelarSubida()">Cancelar</a>
        </form>
    </EditForm>
</div>


<style>
    .inputs {
        border-top-right-radius: 95px !important;
        border-bottom-right-radius: 95px !important;
        /*    background-color: #6a93cb !important;
                            background-image: linear-gradient(315deg, #6a93cb 0%, #a4bfef 74%) !important;*/
    }

    .spanFoto {
        border-top-right-radius: 80px;
        border-bottom-right-radius: 80px;
        border: none;
        background-color: #29539b;
        background-image: linear-gradient(315deg, #29539b 0%, #1e3b70 74%);
        color: white;
    }

    .spandescrip {
        border-top-left-radius: 80px !important;
        border-bottom-left-radius: 80px !important;
        border: none !important;
        width: 13.5% !important;
        background-color: #29539b;
        background-image: linear-gradient(315deg, #29539b 0%, #1e3b70 74%);
        color: white !important;
    }

    .spans {
        border-top-left-radius: 80px !important;
        border-bottom-left-radius: 80px !important;
        border: none !important;
        width: 28% !important;
        background-color: #29539b;
        background-image: linear-gradient(315deg, #29539b 0%, #1e3b70 74%);
        color: white !important;
    }
</style>
@code {
    [Parameter]
    public int id { get; set; }
    [Parameter]
    public int id2 { get; set; }
    public bool isUpdate { get; set; } = false;
    Postulacione postulacion = new Postulacione();
    private Acceso session = new Acceso();


    Empleo empleo = new Empleo();
    Usuario usuario = new Usuario();
    string Message = "Ningún archivo selecionado";
    IReadOnlyList<IBrowserFile> selectedFiles;
    protected override async Task OnInitializedAsync()
    {
        session = IsDataNull.CreateInstanceIfIsNull<Acceso>(await LocalStorage.GetValue<Acceso>(ValuesKeys.Persona));
        if (session.rol == null)
        {
            NavigationManager.NavigateTo("/login");
            await JS.InvokeVoidAsync("NotAllowed");
        }

        isUpdate = id != 0;
        if (isUpdate)
        {
            var response = await http.GetFromJsonAsync<Postulacione>($"api/Postulacion/{id}");
            if (response != null)
            {
                postulacion = response;
            }
            if (session.rol == "Usuario")
            {
                NavigationManager.NavigateTo("/");
                await JS.InvokeVoidAsync("NotAllowed");
            }



        }
        else
        {
            usuario = await http.GetFromJsonAsync<Usuario>($"api/Usuario/{session.id}");
            empleo = await http.GetFromJsonAsync<Empleo>($"api/Empleo/{id2}");
        }
    }
    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles();
        Message = $"{selectedFiles.Count} archivo seleccionado";

        this.StateHasChanged();

    }


    protected async Task CancelarSubida()
    {
        string mensaje = "¿Deseas cancelar el procedimiento?";
        if (await JS.Confirm("Cancelar", mensaje, TipoMensajeSweetAlert.warning))
        {
            if (isUpdate)
            {
                NavigationManager.NavigateTo($"/postulaciones/{id}");
            }
            else
            {
                NavigationManager.NavigateTo($"/empleos/{id2}");
            }
        }
    }
    protected async Task ConfirmarSubida()
    {
        await JS.SaveData("Procedimiento exitoso!", TipoMensajeSweetAlert.success);
    }

    protected async Task Save()
    {
        if (isUpdate)
        {

        }
        else
        {
            foreach (var file in selectedFiles)
            {
                var route = postulacion.ArchivoPostulacion;
                Stream stream = file.OpenReadStream();

                var path = $"{env.WebRootPath}\\pdf\\{file.Name}";

                //if (isUpdate)
                //{
                //    var pathUpdate = $"{env.WebRootPath}\\pdf\\";
                //    string RutaArchivoDeNombreUnico = Path.Combine(pathUpdate, route);
                //    FileInfo informacionArchivo = new FileInfo(RutaArchivoDeNombreUnico);
                //    if (informacionArchivo.Exists)
                //    {
                //        informacionArchivo.Delete();
                //    }
                //}
                postulacion.ArchivoPostulacion = file.Name;
                FileStream fs = File.Create(path);
                await stream.CopyToAsync(fs);
                stream.Close();
                fs.Close();
            }
        }


        HttpResponseMessage response;
        postulacion.IdUsuario = session.id;
        postulacion.IdEmpleo = id2;

        if (isUpdate)
        {
            response = await http.PutAsJsonAsync<Postulacione>($"api/Postulacion/Update/{id}", postulacion);
            if (response.IsSuccessStatusCode)
            {
                await ConfirmarSubida();
            }
        }
        else
        {
            postulacion.EstadoPostulacion = "Pendiente";
            response = await http.PostAsJsonAsync<Postulacione>("api/Postulacion/Create", postulacion);
            if (response.IsSuccessStatusCode)
            {
                await ConfirmarSubida();
            }
        }
        Postulacione saved = response.Content.ReadFromJsonAsync<Postulacione>().Result;
        await Task.Delay(1500);
        if (isUpdate)
        {
            NavigationManager.NavigateTo("/postulaciones");
        }
        else
        {
            NavigationManager.NavigateTo($"/empleos/{id2}");
        }

    }
}
