@page "/postulaciones/{id:int}"
@using OneClickJS.Data.Models
@using OneClickJS.Data
@inject HttpClient http
@using System.Net.Http
@using System.Net.Http.Json
@inject NavigationManager NavigationManager;
@inject IJSRuntime JS

<div class="container justify-content-center">
    <h3>Detalles de la postulación</h3>
    <br />
    <center>
        <div class="card item">
            <div class="card-header" style="color:white">
                Datos del postulado
            </div>
            <div class="card-body">
                <blockquote class="blockquote mb-0">
                    <p>Nombre: @usuario.FullName()</p>

                </blockquote>
            </div>
            <div class="card-footer justify-content-center">
                <span class="badge span2 vacantes">Contacto: @usuario.CorreoUsuario</span>
            </div>
        </div>


        <div class="card item">
            <div class="row g-0">
                <div class="card-header " style="color:white">
                    Datos del empleo
                </div>
                <div class="col-md-4">
                    <img src="/img/empleos/@empleo.FotoEmpleo" class="img-fluid rounded-start" alt="...">
                </div>
                <div class="col">

                    <div class="card-body" style="height:100%; width:100%">
                        <h5 class="card-title">@empleo.NombreEmpleo</h5>
                        <p class="card-text">Descripción: @empleo.DescripcionEmpleo</p>
                        <div class="row justify-content-center">
                            <div class="col">
                                <span class="badge vacantes span2">Vacantes</span>
                            </div>
                            <div class="col">
                                <span class="badge sueldo span2">Sueldo</span>
                            </div>
                            <div class="col">
                                <span class="badge tipo span2">Tipo</span>
                            </div>
                        </div>
                        <div class="row justify-content-center">
                            <div class="col">
                                @empleo.VacantesEmpleo
                            </div>
                            <div class="col">
                                @empleo.SueldoEmpleo
                            </div>
                            <div class="col">
                                @empleo.TipoEmpleo
                            </div>
                        </div>

                    </div>
                    

                </div>
                <div class="card-footer justify-content-center">
                        <span class="badge span2" style="background-color:black">@empleo.ObtenerNameEmpr2(empresa)</span>
                    </div>
            </div>
        </div>




        <button class="btn btn-info" @onclick="()=>ShowOnCurrentPage()">Ver Currículum</button>
        <button class="btn btn-info" @onclick="()=>ShowOnNewTab(postulacion.ArchivoPostulacion)">Ver CV en otra pestaña</button>
        <br />
        <br />
        <a class="btn btn-info" href="/postulaciones/update/@postulacion.IdPostulacion">Cambiar estado</a>
    </center>
    <br />
    @if (!string.IsNullOrEmpty(@archivoPDF))
    {
        <iframe src="/pdf/@archivoPDF" style="width:100%; height:700px"></iframe>

    }
    else
    {
        <iframe src="" style="width:0%; height:0px"></iframe>
    }


</div>



@code {
    [Parameter]
    public int id { get; set; }
    public string archivoPDF = "";
    Postulacione postulacion = new Postulacione();
    Empleo empleo = new Empleo();
    Usuario usuario = new Usuario();
    Categoria categoria = new Categoria();
    Empresa empresa = new Empresa();
    public string estado = "cerrado";

    protected override async Task OnInitializedAsync()
    {
        var response = await http.GetFromJsonAsync<Postulacione>($"api/Postulacion/{id}");

        if (response != null)
        {
            postulacion = response;
            int idEmpleo = postulacion.IdEmpleo;
            var response2 = await http.GetFromJsonAsync<Empleo>($"api/Empleo/{idEmpleo}");
            empleo = response2;
            int idUsuario = postulacion.IdUsuario;
            var response3 = await http.GetFromJsonAsync<Usuario>($"api/Usuario/{idUsuario}");
            usuario = response3;
            int idCat = empleo.IdCategoria;
            var response4 = await http.GetFromJsonAsync<Categoria>($"api/Categoria/{idCat}");
            categoria = response4;
            int idEmpr = empleo.IdEmpresa;
            var response5 = await http.GetFromJsonAsync<Empresa>($"api/Empresa/{idEmpr}");
            empresa = response5;

        }

    }

    private void ShowOnCurrentPage()
    {
        if (estado == "cerrado")
        {
            archivoPDF = postulacion.ArchivoPostulacion;
            estado = "abierto";
        }
        else
        {
            archivoPDF = null;
            estado = "cerrado";
        }

    }

    private void ShowOnNewTab(string archivoPDF)
    {
        JS.InvokeVoidAsync("OpenNewTab", archivoPDF);

    }


}
