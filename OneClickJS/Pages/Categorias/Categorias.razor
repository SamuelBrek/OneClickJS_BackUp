@page "/categorias"
@inject IJSRuntime JS
@using OneClickJS.Data.Models
@using OneClickJS.Data
@inject HttpClient http
@using System.Net.Http
@using System.Net.Http.Json
@using System.Text.Json
@using OneClickJS.Helpers
@using static OneClickJS.Helpers.IJSExtensions
<div class="container">
<div class="title">
    <div class = "title__content">
        <h1>Categorías registradas</h1>
    </div>
    <div class = "title_btn">
        <a href="/categorias/add" class="btn btn-success">
            <i class="oi oi-plus"></i>
            &nbsp;
            Agregar
        </a>
    </div>
</div>


<br />
<p>Esta lista refleja las categorías registradas</p>

<div class="input-group mb-2 mr-sm-2">
      <input type="text" class="form-control" @bind="nombreCategoriaFiltro" placeholder="Filtro por nombre" aria-label="Recipient's username" aria-describedby="button-addon2">
      <button class="btn btn-primary" type="button" id="button-addon2" @onclick="Filtrar"><i class="oi oi-magnifying-glass"></i></button>
      <button class="btn btn-danger" type="button" id="button-addon2" @onclick="Limpiar"><i class="oi oi-delete"></i></button>
</div>


@if (categorias == null)
{
    <p><em>Cargando...</em></p>
}
else
{

         <br />
    <div class="row row-cols-1 row-cols-md-3">
        @foreach (var categoria in categorias)
            {
                <center>
                    <div class="col">
                    <div class="card item" style="max-width: 21rem">
                        <div class="card-header justify-content-center">
                            <div class="col-auto justify-content-center">
                            <span class="badge tipo">Categoria</span> 
                            
                            </div>
                        </div>
                      <img src="img/categoria_icon.png" class="card-img-top" alt="...">
                          <div class="card-body">
                                <h5 class="card-title">Nombre de categoria:</h5>
                                <p class="card-text">@categoria.NombreCategoria</p>
                                <br/>
                        <span class="icon">
                            <a href="/categorias/update/@categoria.IdCategoria" class="btn btn-info btnCurv" title="Editar"><i class="oi oi-pencil"></i></a>
                        </span>
                        <span class="icon">
                            <a class="btn btn-danger btnCurv" title="Eliminar" @onclick="() => ConfirmDelete(categoria.IdCategoria, categoria.NombreCategoria)"><i class="oi oi-trash"></i></a>
                        </span>
                               <!--<a href="#" class="btn btn-primary">Detalles</a>--> 
                          </div>
                           <div class="card-footer justify-content-center">
                           
                           </div>
                    </div>
                </div>
                </center>
            }
        </div>



}

<Paginacion PaginasTotales="paginasTotales" PaginaActual="paginaActual" PaginaSeleccionada="PaginaSeleccionada"></Paginacion>
</div>

@code {
    private Acceso session = new Acceso();
    private readonly string api = "api/Categoria/GetCategorias2";
    private IList<Categoria> categorias;
    private string nombreCategoriaFiltro = string.Empty;
    private int paginaActual = 1;
    private int paginasTotales;
    protected override async Task OnInitializedAsync()
    {
        session = IsDataNull.CreateInstanceIfIsNull<Acceso>(await LocalStorage.GetValue<Acceso>(ValuesKeys.Persona));
        if(session.rol == null)
        {
            NavigationManager.NavigateTo("/login");
            await JS.InvokeVoidAsync("NotAllowed");
        }
        else
        {
            if (session.rol == "Usuario" || session.rol == "Empresa")
            {
                NavigationManager.NavigateTo("/");
                await JS.InvokeVoidAsync("NotAllowed");
            }
        }
        await CargarUsuarios(); 
    }


    private async Task PaginaSeleccionada(int pagina)
    {
        paginaActual = pagina;
        await CargarUsuarios(pagina);
    }

    public async Task Filtrar()
    {
        paginaActual = 1;
        await CargarUsuarios();
    }
    public async Task Limpiar()
    {
        nombreCategoriaFiltro = string.Empty;
        paginaActual = 1;
        await CargarUsuarios();
    }

    protected async Task ConfirmDelete(int id, string nombreCat)
    {
        string mensaje = $"¿Deseas borrar la categoria {nombreCat}?";
        if (await JS.Confirm("Confirmar borrado", mensaje, TipoMensajeSweetAlert.question))
        {
            var response = await http.DeleteAsync($"api/Categoria/Delete/{id}");

        }
        await PaginaSeleccionada(paginaActual);
    }

    async Task CargarUsuarios(int pagina = 1, int cantidadRegistrosAmostrar = 9)
    {
        var httpResponse = await http.GetAsync($"{api}?pagina={pagina}&CantidadAMostrar={cantidadRegistrosAmostrar}&nombre={nombreCategoriaFiltro}");

        if (httpResponse.IsSuccessStatusCode)
        {
            paginasTotales = int.Parse(httpResponse.Headers.GetValues("totalPaginas").FirstOrDefault());
            
            var responsesString = await httpResponse.Content.ReadAsStringAsync();
            categorias = JsonSerializer.Deserialize<IList<Categoria>>(responsesString,
                new JsonSerializerOptions() { PropertyNameCaseInsensitive = true});
        }
        else
        {
            Console.WriteLine("error");
        }
        //categorias = await http.GetFromJsonAsync<IList<Categoria>>(api);
    }
}
