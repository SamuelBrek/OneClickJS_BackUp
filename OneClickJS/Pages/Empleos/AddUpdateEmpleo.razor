@page "/empleos/add"
@page "/empleos/update/{id:int}"
@using Microsoft.AspNetCore.Hosting
@using OneClickJS.Data.Models
@using OneClickJS.Data
@using System.Net.Http
@using System.Net.Http.Json
@inject HttpClient http
@inject NavigationManager NavigationManager;
@inject IJSRuntime JS
@using static OneClickJS.Helpers.IJSExtensions;
@using System.IO;
@inject IWebHostEnvironment env;

<div class="container">
    <h1>@(isUpdate ? $"Editar empleo con Id: {empleo.IdEmpleo}" : "Agregar empleo")</h1>

    <EditForm Model="@empleo">
        <form class="container-border" @onsubmit="Save">
            <DataAnnotationsValidator />
            <div class="row">
                <div class="col">
                    <div class="input-group mb-3">
                        <span class="input-group-text spans" id="inputGroup-sizing-default">Nombre</span>
                        <InputText class="form-control inputs" required="" @bind-Value="@empleo.NombreEmpleo" aria-label="Sizing example input" aria-describedby="inputGroup-sizing-default" />

                    </div>
                </div>
                <div class="col">
                    <div class="input-group mb-3">
                        <span class="input-group-text spans">Sueldo $</span>

                        <InputNumber class="form-control inputs" required="" @bind-Value="@empleo.SueldoEmpleo" aria-label="Dollar amount (with dot and two decimal places)" />
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <div class="input-group mb-3" style="height:87%">
                        <span class="input-group-text spans">Prestaciones</span>
                        <InputTextArea class="form-control inputs" required="" @bind-Value="@empleo.PrestacionesEmpleo" aria-label="With textarea"></InputTextArea>
                    </div>
                </div>
                <div class="col">

                    <div class="row">
                        <div class="input-group mb-3">
                            <span class="input-group-text spans" id="inputGroup-sizing-default 2"><span class="oi oi-person"> </span> Vacantes</span>
                            <InputNumber class="form-control inputs" required="" @bind-Value="@empleo.VacantesEmpleo" aria-label="Sizing example input" aria-describedby="inputGroup-sizing-default 2" />
                        </div>
                    </div>

                    <div class="row">
                        <div class="input-group mb-3">
                            <span class="input-group-text spans" id="inputGroup-sizing-default 3"><span class="oi oi-map-marker"> </span> Municipio</span>
                            <InputText class="form-control inputs" required="" @bind-Value="@empleo.MunicipioEmpleo" aria-label="Sizing example input" aria-describedby="inputGroup-sizing-default 3" />
                        </div>
                    </div>

                </div>
            </div>

            <div class="input-group mb-3">
                <span class="input-group-text spandescrip" id="inputGroup-sizing-default 4">Descripción</span>
                <InputTextArea class="form-control inputs" required="" @bind-Value="@empleo.DescripcionEmpleo" aria-label="Sizing example input" aria-describedby="inputGroup-sizing-default 4" />

            </div>



            <div class="row">
                <div class="col">
                    <div class="input-group mb-3">
                        <span class="input-group-text spans" for="inputGroupSelect01">Tipo</span>
                        <InputSelect class="form-select inputs" required="" @bind-Value="@empleo.TipoEmpleo" id="inputGroupSelect01">
                            <option value="">Selecciona un tipo de empleo...</option>
                            <option value="Temporal">Temporal</option>
                            <option value="Permanente">Permanente</option>
                        </InputSelect>
                    </div>
                </div>
                <div class="col">
                    <div class="input-group mb-3">
                        <span class="input-group-text spans" for="inputGroupSelect02">Categoría</span>
                        <InputSelect class="form-select inputs" required="" @bind-Value="@empleo.IdCategoria" id="inputGroupSelect02">
                            <option value="-1" disabled>Selecciona una categoría...</option>
                            @if (loading)
                            {
                                <option value="0" disabled>Cargando...</option>
                            }
                            else if (categorias != null)
                            {
                                @foreach (var categoria in categorias)
                                {
                                    <option value="@categoria.IdCategoria">@categoria.NombreCategoria</option>
                                }
                            }
                        </InputSelect>
                    </div>
                </div>
            </div>




            <h3>@Message</h3>


            <div class="row">
                <div class="col">
                    <div class="input-group mb-3">
                        <InputFile class="form-control" required="" OnChange="OnInputFileChange" multiple @bind-Value="@empleo.FotoEmpleo" id="fotoEmpleo"></InputFile>
                        <label class="input-group-text spanFoto" for="fotoEmpleo">Subir</label>
                    </div>
                </div>
                <div class="col">
                    @if (session.rol == "Administrador")
                    {
                        <div class="input-group mb-3">
                            <span class="input-group-text spans" required="" for="inputGroupSelect03">Empresa</span>
                            <InputSelect class="form-select inputs" @bind-Value="@empleo.IdEmpresa" id="inputGroupSelect03">
                                <option value="-1" disabled>Selecciona una empresa...</option>
                                @if (loading)
                                {
                                <option value="0" disabled>Cargando...</option>
                                }
                                else if (empresas != null)
                                {
                                @foreach (var empresa in empresas)
                                    {
                                    <option value="@empresa.IdEmpresa">@empresa.NombreEmpresa</option>
                                    }
                                }
                        </InputSelect>
                    </div>
                    }
                    else
                    {
                        <div class="input-group mb-3">
                            <span class="input-group-text spans" for="inputGroupSelect03">Empresa</span>
                            <select class="form-select inputs" disabled="" id="inputGroupSelect03">
                                <option value="-1">@session.emailAddress</option>
                            </select>
                        </div>
                    }

                </div>
            </div>

            <center>
                <button type="submit" class="btn btn-success">Guardar</button>
                <a class="btn btn-danger" @onclick="() => CancelarSubida()">Cancelar</a>
            </center>


        </form>
    </EditForm>
</div>
<style>
    .inputs {
        border-top-right-radius: 95px !important;
        border-bottom-right-radius: 95px !important;
        /*    background-color: #6a93cb !important;
                background-image: linear-gradient(315deg, #6a93cb 0%, #a4bfef 74%) !important;*/
    }

    .spanFoto {
        border-top-right-radius: 80px;
        border-bottom-right-radius: 80px;
        border: none;
        background-color: #29539b;
        background-image: linear-gradient(315deg, #29539b 0%, #1e3b70 74%);
        color: white;
    }

    .spandescrip {
        border-top-left-radius: 80px !important;
        border-bottom-left-radius: 80px !important;
        border: none !important;
        width: 13.5% !important;
        background-color: #29539b;
        background-image: linear-gradient(315deg, #29539b 0%, #1e3b70 74%);
        color: white !important;
    }

    .spans {
        border-top-left-radius: 80px !important;
        border-bottom-left-radius: 80px !important;
        border: none !important;
        width: 28% !important;
        background-color: #29539b;
        background-image: linear-gradient(315deg, #29539b 0%, #1e3b70 74%);
        color: white !important;
    }
</style>
@code {
    [Parameter]
    public int id { get; set; }
    private Acceso session = new Acceso();
    public bool isUpdate { get; set; } = false;
    Empleo empleo = new Empleo();
    bool loading = true;
    IList<Categoria> categorias;
    IList<Empresa> empresas;
    string Message = "Ningún archivo selecionado";
    IReadOnlyList<IBrowserFile> selectedFiles;

    protected override async Task OnInitializedAsync()
    {
        session = IsDataNull.CreateInstanceIfIsNull<Acceso>(await LocalStorage.GetValue<Acceso>(ValuesKeys.Persona));
        if (session.rol == null)
        {
            NavigationManager.NavigateTo("/login");
            await JS.InvokeVoidAsync("NotAllowed");
        }
        else
        {
            if (session.rol == "Usuario")
            {
                NavigationManager.NavigateTo("/");
                await JS.InvokeVoidAsync("NotAllowed");
            }
        }
        categorias = await http.GetFromJsonAsync<IList<Categoria>>("api/Categoria");
        empresas = await http.GetFromJsonAsync<IList<Empresa>>("api/Empresa");
        isUpdate = id != 0;
        if (isUpdate)
        {
            var response = await http.GetFromJsonAsync<Empleo>($"api/Empleo/{id}");
            if (response != null)
            {
                empleo = response;
            }
        }
        loading = false;
    }

    private async void OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles();
        Message = $"{selectedFiles.Count} archivo seleccionado";
        if (isUpdate)
        {
            await JS.UploadedImage($"/img/empleos/{empleo.FotoEmpleo}");
        }
        this.StateHasChanged();

    }

    protected async Task CancelarSubida()
    {
        string mensaje = "¿Deseas cancelar el procedimiento?";
        if (await JS.Confirm("Cancelar", mensaje, TipoMensajeSweetAlert.warning))
        {
            NavigationManager.NavigateTo("/empleos");
        }
    }
    protected async Task ConfirmarSubida()
    {
        await JS.SaveData("Procedimiento exitoso!", TipoMensajeSweetAlert.success);
    }

    protected async Task Save()
    {

        foreach (var file in selectedFiles)
        {

            var route = empleo.FotoEmpleo;
            Stream stream = file.OpenReadStream();

            var path = $"{env.WebRootPath}\\img\\empleos\\{file.Name}";

            if (isUpdate)
            {
                var pathUpdate = $"{env.WebRootPath}\\img\\empleos\\";
                string RutaArchivoDeNombreUnico = Path.Combine(pathUpdate, route);
                FileInfo informacionArchivo = new FileInfo(RutaArchivoDeNombreUnico);
                if (informacionArchivo.Exists)
                {
                    informacionArchivo.Delete();
                }
            }
            empleo.FotoEmpleo = file.Name;
            FileStream fs = File.Create(path);
            await stream.CopyToAsync(fs);

            stream.Close();
            fs.Close();

        }
        Message = $"{selectedFiles.Count} archivo subido al servidor";
        this.StateHasChanged();

        if (session.rol == "Empresa")
        {
            empleo.IdEmpresa = session.id;
        }
        HttpResponseMessage response;
        if (isUpdate)
        {
            response = await http.PutAsJsonAsync<Empleo>($"api/Empleo/Update/{id}", empleo!);
            if (response.IsSuccessStatusCode)
            {
                await ConfirmarSubida();
            }
        }
        else
        {
            response = await http.PostAsJsonAsync<Empleo>("api/Empleo/Create", empleo!);
            if (response.IsSuccessStatusCode)
            {
                await ConfirmarSubida();
            }
        }
        Empleo saved = response.Content.ReadFromJsonAsync<Empleo>().Result;
        await Task.Delay(1500);
        NavigationManager.NavigateTo("/empleos");
    }
}

