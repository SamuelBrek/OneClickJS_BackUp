@page "/empleos"

@using Microsoft.AspNetCore.Hosting
@using Microsoft.AspNetCore.Mvc.Rendering
@using OneClickJS.Data.Models
@using OneClickJS.Data
@inject HttpClient http
@using System.Net.Http
@using System.Net.Http.Json
@using System.Text.Json
@using Microsoft.AspNetCore.Http;
@using Microsoft.AspNetCore.Mvc;
@using System.Threading.Tasks;
@using System.Linq;
@using System.IO
@inject IJSRuntime JS
@using static OneClickJS.Helpers.IJSExtensions
@inject IWebHostEnvironment env

<div class="container">
    <div class="title">
        <div class="title__content">
            <h1>Catálogo de empleos</h1>
        </div>
        @if (session.rol == "Administrador")
        {
            <div class="title_btn">
                <a href="/empleos/add" class="btn btn-success">
                    <i class="oi oi-plus"></i>
                    &nbsp;
                    Agregar
                </a>
            </div>
        }

    </div>

    <p>Esta lista refleja los empleos registrados</p>

    <div class="input-group mb-2 mr-sm-2">
        <input type="text" class="form-control" @bind="nombreEmpleoFiltro" placeholder="Filtro por nombre" aria-label="Recipient's username" aria-describedby="button-addon2">
        <button class="btn btn-primary" type="button" id="button-addon2" @onclick="Filtrar"><i class="oi oi-magnifying-glass"></i></button>
        <button class="btn btn-danger" type="button" id="button-addon2" @onclick="Limpiar"><i class="oi oi-delete"></i></button>
    </div>


    @if (empleos == null)
    {
        <p><em>Cargando...</em></p>
    }
    else
    {
        <br />
        <div class="row row-cols-1 row-cols-md-3">
            @foreach (var empleo in empleos)
            {
                <center>
                    <div class="col">
                        <div class="card item" style="max-width: 21rem">
                            <div class="card-header justify-content-center">
                                <div class="col-auto justify-content-center">
                                    <span class="badge tipo">@empleo.ObtenerNameCat(categorias)</span>

                                </div>
                            </div>
                            <img src="img/empleos/@empleo.FotoEmpleo" class="card-img-top" alt="...">
                            <div class="card-body">
                                <h5 class="card-title">@empleo.NombreEmpleo</h5>
                                <p class="card-text">@empleo.DescripcionEmpleo</p>
                                <div class="row justify-content-center">
                                    <div class="col">
                                        <span class="badge vacantes span2">Vacantes</span>
                                    </div>
                                    <div class="col">
                                        <span class="badge sueldo span2">Sueldo</span>
                                    </div>
                                    <div class="col">
                                        <span class="badge tipo2 span2">Tipo</span>
                                    </div>
                                </div>
                                <div class="row justify-content-center">
                                    <div class="col">
                                        @empleo.VacantesEmpleo
                                    </div>
                                    <div class="col">
                                        @empleo.SueldoEmpleo
                                    </div>
                                    <div class="col">
                                        @empleo.TipoEmpleo
                                    </div>
                                </div>
                                <br />


                                <div class="row">
                                    <div class="col">
                                        <span class="icon">
                                            <a href="/empleos/@empleo.IdEmpleo" class="btn btn-info btnCurv" title="Detalle"><i class="oi oi-eye"></i></a>
                                        </span>
                                    </div>
                                    @if (session.rol == "Administrador")
                                    {
                                        <div class="col">
                                            <span class="icon">
                                                <a class="btn btn-danger btnCurv" title="Eliminar" @onclick="() => ConfirmDelete(empleo.IdEmpleo, empleo.NombreEmpleo, empleo.FotoEmpleo)"><i class="oi oi-trash"></i></a>
                                            </span>
                                        </div>
                                    }

                                </div>



                                <!--<a href="#" class="btn btn-primary">Detalles</a>-->
                    </div>
                            <div class="card-footer justify-content-center">
                                <span class="badge span2" style="background-color:black">@empleo.ObtenerNameEmpr(empresas)</span>
                            </div>
                        </div>
                    </div>
                </center>
            }
        </div>



    }
    <br />
    <Paginacion PaginasTotales="paginasTotales" PaginaActual="paginaActual" PaginaSeleccionada="PaginaSeleccionada"></Paginacion>
</div>
@code {

    private readonly string api = "api/Empleo/GetEmpleos2";
    private IList<Empleo> empleos;

    private readonly string api2 = "api/Categoria/";
    private IList<Categoria> categorias;

    private readonly string api3 = "api/Empresa/";
    private IList<Empresa> empresas;

    private string nombreEmpleoFiltro = string.Empty;
    private int paginaActual = 1;
    private int paginasTotales;
    private Acceso session = new Acceso();


    protected override async Task OnInitializedAsync()
    {
        session = IsDataNull.CreateInstanceIfIsNull<Acceso>(await LocalStorage.GetValue<Acceso>(ValuesKeys.Persona));
        if (session.rol == null)
        {
            NavigationManager.NavigateTo("/login");
            await JS.InvokeVoidAsync("NotAllowed");
        }
        await CargarEmpleos();

    }

    private async Task PaginaSeleccionada(int pagina)
    {
        paginaActual = pagina;
        await CargarEmpleos(pagina);
    }

    public async Task Filtrar()
    {
        paginaActual = 1;
        await CargarEmpleos();
    }
    public async Task Limpiar()
    {
        nombreEmpleoFiltro = string.Empty;
        paginaActual = 1;
        await CargarEmpleos();
    }

    protected async Task ConfirmDelete(int id, string nombreEmpleo, string fotoEmpleo)
    {
        string mensaje = $"¿Deseas borrar el empleo {nombreEmpleo}?";
        if (await JS.Confirm("Confirmar borrado", mensaje, TipoMensajeSweetAlert.question))
        {
            var response = await http.DeleteAsync($"api/Empleo/Delete/{id}");
            var pathUpdate = $"{env.WebRootPath}\\img\\empleos\\";
            string RutaArchivoDeNombreUnico = Path.Combine(pathUpdate, fotoEmpleo);
            FileInfo informacionArchivo = new FileInfo(RutaArchivoDeNombreUnico);
            if (informacionArchivo.Exists)
            {
                informacionArchivo.Delete();
            }
        }
        await PaginaSeleccionada(paginaActual);
    }

    async Task CargarEmpleos(int pagina = 1, int cantidadRegistrosAmostrar = 9)
    {
        var httpResponse = await http.GetAsync($"{api}?pagina={pagina}&CantidadAMostrar={cantidadRegistrosAmostrar}&nombre={nombreEmpleoFiltro}");
        if (httpResponse.IsSuccessStatusCode)
        {
            paginasTotales = int.Parse(httpResponse.Headers.GetValues("totalPaginas").FirstOrDefault());
            var responsesString = await httpResponse.Content.ReadAsStringAsync();
            var responseCat = await http.GetFromJsonAsync<IList<Categoria>>(api2);
            var responseEmpresa = await http.GetFromJsonAsync<IList<Empresa>>(api3);
            empresas = responseEmpresa;
            categorias = responseCat;
            empleos = JsonSerializer.Deserialize<IList<Empleo>>(responsesString,
                new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });
        }
        else
        {
            Console.WriteLine("error");
        }
        //empleos = await http.GetFromJsonAsync<IList<Empleo>>(api);
    }
}
