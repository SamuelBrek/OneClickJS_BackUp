@page "/usuarios"
@using Microsoft.AspNetCore.Authorization
@using OneClickJS.Data.Models
@using OneClickJS.Data
@inject HttpClient http
@inject IJSRuntime JS
@using System.Net.Http
@using System.Net.Http.Json
@using System.Text.Json
@using static OneClickJS.Helpers.IJSExtensions



<div class="container">

    <div class="title">
        <div class="title__content">
            <h1>Usuarios registrados</h1>
        </div>
        <div class="title_btn">
            <a href="/usuarios/add" class="btn btn-success">
                <i class="oi oi-plus"></i>
                &nbsp;
                Agregar
            </a>
        </div>
    </div>
    <br />
    <p>Esta lista refleja los usuarios registrados</p>

    <div class="input-group mb-2 mr-sm-2">
        <input type="text" class="form-control" @bind="nombreUsuarioFiltro" placeholder="Filtro por nombre" aria-label="Recipient's username" aria-describedby="button-addon2">
        <button class="btn btn-primary peach-gradient m-0" type="button" id="button-addon2" @onclick="Filtrar"><i class="oi oi-magnifying-glass"></i></button>
        <button class="btn btn-danger" type="button" id="button-addon2" @onclick="Limpiar"><i class="oi oi-delete"></i></button>
    </div>


    @if (usuarios == null)
    {
        <p><em>Cargando...</em></p>
    }
    else
    {
        <br />
        <div class="row row-cols-1 row-cols-md-3">
            @foreach (var usuario in usuarios)
            {
                <center>
                    <div class="col">
                        <div class="card item" style="max-width: 21rem">
                            <div class="card-header justify-content-center">
                                <div class="col-auto justify-content-center">
                                    <span class="badge tipo">@usuario.NivelUsuario</span>
                                </div>
                            </div>
                            <img src="img/user_icon.png" class="card-img-top" alt="...">
                            <div class="card-body">
                                <h5 class="card-title">@usuario.FullName()</h5>
                                <p class="card-text">Correo: @usuario.CorreoUsuario</p>
                                <br />
                                <span class="icon btnCurv">
                                    <a href="/usuarios/@usuario.IdUsuario" class="btn btn-info btnCurv" title="Detalle"><i class="oi oi-eye"></i></a>
                                </span>
                                <span class="icon">
                                    <button class="btn btn-danger btnCurv" @onclick="() => ConfirmDelete(usuario.IdUsuario, usuario.FullName())" title="Eliminar"><i class="oi oi-trash"></i></button>
                                </span>
                                <!--<a href="#" class="btn btn-primary">Detalles</a>-->
                    </div>
                            <div class="card-footer justify-content-center">
                            </div>
                        </div>
                    </div>
                </center>
            }
        </div>
    }
    <br />
    <Paginacion PaginasTotales="paginasTotales" PaginaActual="paginaActual" PaginaSeleccionada="PaginaSeleccionada"></Paginacion>
</div>
@code {


    private readonly string api = "api/Usuario/GetUsuarios2";
    private IList<Usuario> usuarios;
    private string nombreUsuarioFiltro = string.Empty;
    private int paginaActual = 1;
    private int paginasTotales;
    protected override async Task OnInitializedAsync()
    {
        await CargarUsuarios(); 
    }
    private async Task PaginaSeleccionada(int pagina)
    {
        paginaActual = pagina;
        await CargarUsuarios(pagina);
    }

    public async Task Filtrar()
    {
        paginaActual = 1;
        await CargarUsuarios();
    }
    public async Task Limpiar()
    {
        nombreUsuarioFiltro = string.Empty;
        paginaActual = 1;
        await CargarUsuarios();
    }

    protected async Task ConfirmDelete(int id, string nombreCompleto)
    {
        string mensaje = $"¿Deseas borrar a {nombreCompleto}?";
        if (await JS.Confirm("Confirmar borrado", mensaje, TipoMensajeSweetAlert.question))
        {
            var response = await http.DeleteAsync($"api/Usuario/Delete/{id}");

        }
        await PaginaSeleccionada(paginaActual);
    }

    async Task CargarUsuarios(int pagina = 1, int cantidadRegistrosAmostrar = 9)
    {
        var httpResponse = await http.GetAsync($"{api}?pagina={pagina}&CantidadAMostrar={cantidadRegistrosAmostrar}&nombre={nombreUsuarioFiltro}");
        if (httpResponse.IsSuccessStatusCode)
        {
            paginasTotales = int.Parse(httpResponse.Headers.GetValues("totalPaginas").FirstOrDefault());

            var responsesString = await httpResponse.Content.ReadAsStringAsync();
            usuarios = JsonSerializer.Deserialize<IList<Usuario>>(responsesString,
                new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });
        }
        else
        {
            Console.WriteLine("error");
        }

        //usuarios = await http.GetFromJsonAsync<IList<Usuario>>(api);
    }
}


