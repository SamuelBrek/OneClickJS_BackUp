@page "/usuarios/add"
@page "/usuarios/update/{id:int}"

@using OneClickJS.Data.Models
@using OneClickJS.Data
@using System.Net.Http
@inject IJSRuntime JS
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using static OneClickJS.Helpers.IJSExtensions
@inject HttpClient http
@inject NavigationManager NavigationManager


<div class="container">
    <h1>@(isUpdate ? $"Editar Usuario con Id: {usuario.IdUsuario}" : "Agregar usuario")</h1>

    <EditForm Model="@usuario">
        <form class="container-border" @onsubmit="Save">
            <DataAnnotationsValidator />

            <div class="row">
                <div class="col">
                    <div class="input-group mb-3">
                        <span class="input-group-text spans" for="name">Nombre</span>
                        <InputText class="form-control inputs" required="" @bind-Value="@usuario.NombreUsuario" id="name"></InputText>

                    </div>
                </div>
                <div class="col">
                    <div class="input-group mb-3">

                        <span class="input-group-text spans" for="last-name">Apellido</span>
                        <InputText class="form-control inputs" required="" @bind-Value="@usuario.ApellidoUsuario" id="last-name"></InputText>


                    </div>
                </div>
            </div>







            @if (isUpdate == false)
            {


                <div class="row">
                    <div class="col">
                        <div class="input-group mb-3">
                            <span class="input-group-text spans" for="correo">Correo</span>
                            <InputText class="form-control inputs" required="" @bind-Value="@usuario.CorreoUsuario" id="correo"></InputText>

                        </div>
                    </div>
                    <div class="col">
                        <div class="input-group mb-3">


                            <span class="input-group-text spans" for="password">Contraseña</span>
                            <InputText class="form-control inputs" required="" @bind-Value="@usuario.ContraseñaUsuario" id="password"></InputText>

                        </div>
                    </div>
                </div>




            }
            @if (isUpdate)
            {
                <div class="input-group mb-3">
                    <spans class="input-group-text spans" for="nivel">Nivel</spans>
                    <InputSelect class="form-control inputs" required="" @bind-Value="@usuario.NivelUsuario" id="nivel" placeholder="Usuario">
                        <option value="Usuario">Usuario</option>
                        <option value="Administrador">Administrador</option>
                    </InputSelect>
                </div>
            }

            <button type="submit" class="btn btn-success">Guardar</button>
            <a class="btn btn-danger" @onclick="() => CancelarSubida()">Cancelar</a>
        </form>
    </EditForm>
</div>

<style>
    .inputs {
        border-top-right-radius: 80px;
        border-bottom-right-radius: 80px;
    }

    .spans {
        border-top-left-radius: 80px;
        border-bottom-left-radius: 80px;
        border: none;
        width: 23%;
        background-color: #29539b;
        background-image: linear-gradient(315deg, #29539b 0%, #1e3b70 74%);
        color: white;
    }
</style>

@code {
    [Parameter]
    public int id { get; set; }
    public bool isUpdate { get; set; } = false;
    Usuario usuario = new Usuario();
    private Acceso session = new Acceso();
    protected override async Task OnInitializedAsync()
    {
        session = IsDataNull.CreateInstanceIfIsNull<Acceso>(await LocalStorage.GetValue<Acceso>(ValuesKeys.Persona));
        if (session.rol == null)
        {
            NavigationManager.NavigateTo("/login");
            await JS.InvokeVoidAsync("NotAllowed");
        }
        else
        {
            if (session.rol == "Usuario" || session.rol == "Empresa")
            {
                NavigationManager.NavigateTo("/");
                await JS.InvokeVoidAsync("NotAllowed");
            }
        }
        isUpdate = id != 0;
        if (isUpdate)
        {
            var response = await http.GetFromJsonAsync<Usuario>($"api/Usuario/{id}");
            if (response != null)
            {
                usuario = response;
            }
        }
    }


    protected async Task CancelarSubida()
    {
        string mensaje = "¿Deseas cancelar el procedimiento?";
        if (await JS.Confirm("Cancelar", mensaje, TipoMensajeSweetAlert.warning))
        {
            NavigationManager.NavigateTo("/usuarios");
        }
    }
    protected async Task ConfirmarSubida()
    {
        await JS.SaveData("Procedimiento exitoso!", TipoMensajeSweetAlert.success);
    }

    protected async Task Save()
    {

        HttpResponseMessage response;
        if (isUpdate)
        {
            response = await http.PutAsJsonAsync<Usuario>($"api/Usuario/Update/{id}", usuario);
            if (response.IsSuccessStatusCode)
            {
                await ConfirmarSubida();
            }
        }
        else
        {
            usuario.NivelUsuario = "Usuario";
            response = await http.PostAsJsonAsync<Usuario>("api/Usuario/Create", usuario);
            if (response.IsSuccessStatusCode)
            {
                await ConfirmarSubida();
            }
        }
        Usuario saved = response.Content.ReadFromJsonAsync<Usuario>().Result;
        await Task.Delay(1500);
        NavigationManager.NavigateTo("/usuarios");
    }
}
