@page "/empresas/add"
@page "/empresas/update/{id:int}"
@using Microsoft.AspNetCore.Hosting;
@using OneClickJS.Data.Models;
@using OneClickJS.Data;
@inject HttpClient http;
@using System.Net.Http;
@using System.Net.Http.Json;
@inject NavigationManager NavigationManager;
@inject IJSRuntime JS;
@using System.IO;
@inject IWebHostEnvironment env;
@using static OneClickJS.Helpers.IJSExtensions;

<div class="container">
    <h1>@(isUpdate ? $"Editar empresa con Id: {empresa.IdEmpresa}" : "Agregar empresa")</h1>

    <EditForm Model="@empresa">
        <form class="container-border" @onsubmit="Save">
            <DataAnnotationsValidator />



            <div class="row">
                <div class="col">
                    <div class="input-group mb-3">
                        <span class="input-group-text spans" for="nameEmpresa">Nombre de empresa</span>
                        <InputText class="form-control inputs" required="" @bind-Value="@empresa.NombreEmpresa" id="nameEmpresa"></InputText>

                    </div>
                </div>
                <div class="col">
                    <div class="input-group mb-3">

                        <span class="input-group-text spans" for="director">Nombre de director</span>
                        <InputText class="form-control inputs" required="" @bind-Value="@empresa.DirectorEmpresa" id="director"></InputText>

                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col">
                    <div class="input-group mb-3">
                        <span class="input-group-text spans" for="calle">Calle de empresa</span>
                        <InputText class="form-control inputs" required="" @bind-Value="@empresa.CalleEmpresa" id="calle"></InputText>

                    </div>
                </div>
                <div class="col">
                    <div class="input-group mb-3">

                        <span class="input-group-text spans" for="numero">Número de empresa</span>
                        <InputText class="form-control inputs" required="" @bind-Value="@empresa.NumeroEmpresa" id="numero"></InputText>
                    </div>
                </div>
            </div>






            <div class="row">
                <div class="col">
                    <div class="input-group mb-3">
                        <span class="input-group-text spans" for="cruzamiento">Cruzamiento</span>
                        <InputText class="form-control inputs" required="" @bind-Value="@empresa.CruzamientoEmpresa" id="cruzamiento"></InputText>

                    </div>
                </div>
                <div class="col">
                    <div class="input-group mb-3">
                        <span class="input-group-text spans" for="colonia">Colonia de empresa</span>
                        <InputText class="form-control inputs" required="" @bind-Value="@empresa.ColoniaEmpresa" id="colonia"></InputText>

                    </div>
                </div>
            </div>






            <div class="row">
                <div class="col">
                    <div class="input-group mb-3">
                        <span class="input-group-text spans" for="telefono">Teléfono</span>
                        <InputText class="form-control inputs" required="" @bind-Value="@empresa.TelefonoEmpresa" id="telefono"></InputText>

                    </div>
                </div>
                <div class="col">
                    <div class="input-group mb-3">
                        <span class="input-group-text spans" for="municipio">Municipio</span>
                        <InputText class="form-control inputs" required="" @bind-Value="@empresa.MunicipioEmpresa" id="municipio"></InputText>

                    </div>
                </div>
            </div>





            @if (isUpdate == false)
            {
                <div class="input-group mb-3">
                    <span for="disabledTextInput" class="input-group-text spandescrip">Nivel</span>
                    <input type="text" id="disabledTextInput" class="form-control inputs" placeholder="Empresa" disabled>
                </div>




                <div class="row">
                    <div class="col">
                        <div class="input-group mb-3">

                            <span class="input-group-text spans" for="correoEmpresa">Correo empresa</span>
                            <InputText class="form-control inputs" required="" @bind-Value="@empresa.CorreoEmpresa" id="correoEmpresa"></InputText>
                        </div>
                    </div>
                    <div class="col">
                        <div class="input-group mb-3">
                            <span class="input-group-text spans" for="contraseniaEmpresa">Contraseña </span>
                            <InputText class="form-control inputs" required="" @bind-Value="@empresa.ContraseniaEmpresa" id="contraseniaEmpresa"></InputText>

                        </div>
                    </div>
                </div>





            }
            <h3>@Message</h3>

            <div class="input-group mb-3">


                <InputFile class="form-control" required="" OnChange="OnInputFileChange" multiple @bind-Value="@empresa.FotoEmpresa" id="FotoEmpresa"></InputFile>
                <span class="input-group-text spanFoto" id="FotoEmpresa">Foto de empresa</span>
            </div>

            <center>
                <button type="submit" class="btn btn-success">Guardar</button>
                <a class="btn btn-danger" @onclick="() => CancelarSubida()">Cancelar</a>
            </center>

        </form>
    </EditForm>
</div>


<style>
    .inputs {
        border-top-right-radius: 95px !important;
        border-bottom-right-radius: 95px !important;
        /*    background-color: #6a93cb !important;
                                                background-image: linear-gradient(315deg, #6a93cb 0%, #a4bfef 74%) !important;*/
    }

    .spanFoto {
        border-top-right-radius: 80px;
        border-bottom-right-radius: 80px;
        border: none;
        background-color: #29539b;
        background-image: linear-gradient(315deg, #29539b 0%, #1e3b70 74%);
        color: white;
    }

    .spandescrip {
        border-top-left-radius: 80px !important;
        border-bottom-left-radius: 80px !important;
        border: none !important;
        width: 17.5% !important;
        background-color: #29539b;
        background-image: linear-gradient(315deg, #29539b 0%, #1e3b70 74%);
        color: white !important;
    }

    .spans {
        border-top-left-radius: 80px !important;
        border-bottom-left-radius: 80px !important;
        border: none !important;
        width: 35% !important;
        background-color: #29539b;
        background-image: linear-gradient(315deg, #29539b 0%, #1e3b70 74%);
        color: white !important;
    }
</style>

@code {
    [Parameter]
    public int id { get; set; }
    private Acceso session = new Acceso();
    public bool isUpdate { get; set; } = false;
    Empresa empresa = new Empresa();
    string Message = "Ningún archivo selecionado";
    IReadOnlyList<IBrowserFile> selectedFiles;

    protected override async Task OnInitializedAsync()
    {
        session = IsDataNull.CreateInstanceIfIsNull<Acceso>(await LocalStorage.GetValue<Acceso>(ValuesKeys.Persona));
        if (session.rol == null)
        {
            NavigationManager.NavigateTo("/login");
            await JS.InvokeVoidAsync("NotAllowed");
        }
        else
        {
            if (session.rol == "Usuario" || session.rol == "Empresa")
            {
                NavigationManager.NavigateTo("/");
                await JS.InvokeVoidAsync("NotAllowed");
            }
        }
        isUpdate = id != 0;
        if (isUpdate)
        {
            var response = await http.GetFromJsonAsync<Empresa>($"api/Empresa/{id}");
            if (response != null)
            {
                empresa = response;
            }
        }
    }

    private async void OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles();
        Message = $"{selectedFiles.Count} archivo seleccionado";
        if (isUpdate)
        {
            await JS.UploadedImage($"/img/empresas/{empresa.FotoEmpresa}");
        }
        this.StateHasChanged();

    }



    protected async Task CancelarSubida()
    {
        string mensaje = "¿Deseas cancelar el procedimiento?";
        if (await JS.Confirm("Cancelar", mensaje, TipoMensajeSweetAlert.warning))
        {
            NavigationManager.NavigateTo("/empresas");
        }
    }
    protected async Task ConfirmarSubida()
    {
        await JS.SaveData("Procedimiento exitoso!", TipoMensajeSweetAlert.success);
    }

    protected async Task Save()
    {

        foreach (var file in selectedFiles)
        {
            var route = empresa.FotoEmpresa;
            Stream stream = file.OpenReadStream();

            var path = $"{env.WebRootPath}\\img\\empresas\\{file.Name}";

            if (isUpdate)
            {
                var pathUpdate = $"{env.WebRootPath}\\img\\empresas\\";
                string RutaArchivoDeNombreUnico = Path.Combine(pathUpdate, route);
                FileInfo informacionArchivo = new FileInfo(RutaArchivoDeNombreUnico);
                if (informacionArchivo.Exists)
                {
                    informacionArchivo.Delete();
                }
            }
            empresa.FotoEmpresa = file.Name;
            FileStream fs = File.Create(path);
            await stream.CopyToAsync(fs);
            stream.Close();
            fs.Close();

        }
        Message = $"{selectedFiles.Count} archivo subido al servidor";
        this.StateHasChanged();
        empresa.NivelEmpresa = "Empresa";
        HttpResponseMessage response;
        if (isUpdate)
        {
            response = await http.PutAsJsonAsync<Empresa>($"api/Empresa/Update/{id}", empresa);
            if (response.IsSuccessStatusCode)
            {
                await ConfirmarSubida();
            }
        }
        else
        {
            response = await http.PostAsJsonAsync<Empresa>("api/Empresa/Create", empresa);
            if (response.IsSuccessStatusCode)
            {
                await ConfirmarSubida();
            }
        }
        Empresa saved = response.Content.ReadFromJsonAsync<Empresa>().Result;
        await Task.Delay(1500);
        NavigationManager.NavigateTo("/empresas");
    }
}

